1. 객체
	1) 객체란: Data와 Method(기능, 함수)가 있다. 

	2) 개념: Abstracton(추상화) 
      		 Encapsulation(은닉화)
	     	   inheritance(상속)
		       polynorphism(다형성)
           4가지 기능을 사용하는 개념이 객체.

	3) Abstracton(추상화) -> class를 이용해서 추상화 되어있는 객체를 만든다. 즉, class가 객체를 찍어내는 틀과 같다.
		 (1) class의 구조   -> 	datatype data : data
					                  returnType func() : method
					            new를 통해 class를 객체화
					            일단 객체화 된 객체는 상태가 바뀔 수 있고, 같은 class의 다른 객체와 달라질 수 있다.
					            단, 객체의 틀이 되는 class는 바뀌지 않는다.	
                      말 그대로, class는 빵틀, 객체는 class에 의해 만들어진 빵. 빵은 변형이 되지만, 빵틀은 그대로여야한다.

		(2) 예시
			package edu.jaen.java;
			class Customer 
			{
				String  name;
				String  address;
				int	    age;
			
				public void customerInfo(){								                                    //선언부
					System.out.println("이름 : "+name+" \t주소 : "+address+" \t나이 : "+age);	   //구현부
				}			
			}			

			package edu.jaen.java;					              	//같은 package의 customer.java를 사용할 수 있다. (?)
			class CustomerTest						                  //프로그램 실행 용도의 class. java는 객체 지향이므로, 굳이 class로 객체화 해줌. class 밖에서는 어떤 코드도 작성 불가
			{
				public static void main(String[] args) 
				{
					Customer cu=new Customer();			            //customer이라는 class를 틀로 해서 cu라는 객체를 찍어낸다.
					cu.name="홍길동";			                     //cu라는 객체의 name 변수에 "홍길동"저장
					cu.address="서울";						
					cu.age=20;
					cu.customerInfo();				                  //객체의 customerInfo method 실행부
		
					Customer cu2=new Customer();			          //Customer는 class, cu2는 객체 Customer class 틀을 따르지만, cu2는 자유롭게 바뀔 수 있다.
					cu2.name = "둘리";
					cu2.age=7;
					cu2.address="쌍문동";
					cu2.customerInfo();
				}
			}



	4) Contomer c = new Costomer() 가 실행될 때 컴퓨터 작업
		    method: 객체에 있는 함수라고 생각하면 될 듯, function이 좀 더 큰 범위.
    		heap:  객체를 저장하는 영역. 데이터가 오가는 작업이 많다. 선입선출(먼저 들어온 것이 먼저 출력된다.)
		    stack: 데이터를 사용하는 영역. heap에 있는 객체의 주소를 이용해서, heap에 있는 데이터를 사용하게 된다. 선입후출(늦게 들어온 것이 먼저 출력된다.)

		(1) 객체는 heap 영역에 저장. (객체 c의 내부에 있는 데이터, method 모두 heap 영역에 저장)
		    c.name = "홍길동" 으로 객체의 변수에 저장하면, heap 영역의 변수에 값이 저장된다. class는 변화 없고, c라는 객체 내의 변수에만 저장된다.
		(2) 객체의 주소(해시주소)를 가리키는 객체의 이름 c는 stack 영역에 저장됨. 
        해시 주소 : stack에서 heap에 있는 객체를 사용하기 위해, heap에서 객체가 어디 있는지에 대한 정보인 주소를 해시 주소라고 한다.
		(3) static 선언한 내용은 static 영역에 저장된다.
		(4) main 내에서 method를 사용하게되면, method는 stack에 저장된다.
			즉, main위에 method가 쌓이고, stack이므로 선입후출에 의해 method가 먼저 수행된다.
      (당연한 얘기, main내에서 함수가 호출되면, 함수를 먼저 실행하고, 함수가 끝나면 main의 내용을 읽는 것.)
		+ heap에 저장된 객체의 사용이 끝나면 java는 GARBAGE COLLECTOR에 의해 자동으로 지워준다. (C 등 여타 언어는 손수 지워줘야됨)
		  객체 카운터라는 개념을 사용하여 객체가 사용될때마다 카운트를 내려서 0이 되면 소멸시킨다.
		  
	5) Constructor(생성자): 생성자는 함수다. 함수는 기본적으로 선언부, 구현부, 호출부 3개로 구성된다.
				but, 생성자는 객체가 만들어지는 순간(★)에 자동으로 호출되므로, 호출부가 필요 없다. (마음대로 호출 불가, 객체가 만들어질 때 자동으로 호출)
				     생성자는 반환도 없다. void는 void를 반환하는것(0의 개념)이라면 생성자는 Null처럼 반환을 안함
             생성자는 객체가 만들어지는 순간에 이미 만들어진다는 것이 중요.
				구현부와 입력 매개변수는 있을 수 있다.
        생성자 이름은 class 이름과 같다.
				사실, 생성자를 선언하지 않더라도, 자동으로 만들어진다. 이를 default Constructor라고 한다.

				생성자는 "받는 인자의 개수가 다른 경우", 같은 이름이더라도 여러 개의 생성자를 만들 수 있다.
				받는 인자의 개수가 같더라도, 인자의 자료형이 다르면 생성 가능
        즉, 같은 이름의 다른 역할을 하는 여러개의 함수를 만들 수 있다.
					-> 이렇게 여러개의 생성자를 만드는 경우를 "생성자 오버로드"라고 한다.				
